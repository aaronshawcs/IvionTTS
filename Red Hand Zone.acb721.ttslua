--this zone tracks the cards in Red's hand

--{-0.01, 3.40, -26.01}
--{0.00, 0.00, 6.00}
--{15.00, 0.54, 0.00}
cardsInHand = {}

  -- cardsInHand is the card_info table for the card and the specific card's GUID
  -- cardsInHand[CARDNAME] table:
  -- action        int
  -- power         int
  -- range         int
  -- types         table:
  --               [TYPENAME]        bool
  -- control       table
  --               [CONTROLNAME]     bool
  -- obj_guid      int    --added by this script

gameManager_GUID = 'ae7b3c'

function onLoad(save_state)
  att_cache = {}
  gameManager = getObjectFromGUID(gameManager_GUID)
end

--adds card to hand
function onObjectEnterScriptingZone(zone, object)
  if zone == self then
    if (object) and (object.tag=="Card") then
      name = object.getName()
      card_stats = gameManager.call("getCardStats", {name = name})
      card_stats.obj_guid = object.getGUID()
      cardsInHand[name] = card_stats
      if (gameManager.call('checkIfPlayable', {name = name, attributes = att_cache})).playable then
        object.highlightOn({r = 0.15, g = 1, b = 0.3})
      else
        object.highlightOn({r = 1, g = 0, b = 0})
      end
      --table.insert(cardsInHand, object)
    end
  end
end

--removes card from hand
function onObjectLeaveScriptingZone(zone, object)
  if zone == self then
    if (object) and (object.tag == 'Card') then
      cardsInHand[object.getName()] = nil
      object.highlightOff()
      --for i, v in ipairs(cardsInHand) do
      --  if  object == v then
      --    table.remove(cardsInHand, i)
      --    break
      --  end
      --end
    end
  end
end

function updatePlayableCards(attributes)
  att_cache = attributes
  for n, t in pairs(cardsInHand) do
    card_obj = getObjectFromGUID(t.obj_guid)
    if card_obj then
      if (gameManager.call('checkIfPlayable', {name = n, attributes = attributes})).playable then
        card_obj.highlightOn({r = 0.15, g = 1, b = 0.3})
      else
        card_obj.highlightOn({r = 1, g = 0, b = 0})
      end
    else
      cardsInHand[n] = nil
    end
  end
  --print('-----')
end


function onObjectPickedUp(player_color, picked_up_object)
  --print(cardsInHand[picked_up_object.getName()])
  table = cardsInHand[picked_up_object.getName()]
  if table and table.obj_guid == picked_up_object.guid then
    --if cardsInHand[picked_up_object.getName()].obj_guid == picked_up_object.guid then
    --end
    --gameManager.call("playCard", {player_color = "Red", card = picked_up_object})
    --print("kansas!")
  end
end