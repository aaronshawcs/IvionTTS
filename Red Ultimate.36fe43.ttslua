--Scripting Trigger for making and assigning Red Ultimate

reservedUlt = nil
--deckBuilder_GUID = 'fa7170'
--placeDeckHereText_GUID = "4357db"
gameManager_GUID = 'ae7b3c'
function onLoad(save_state)
  gameManager = getObjectFromGUID(gameManager_GUID)
  deckBuilder = getObjectFromGUID(deckBuilder_GUID)
  ultimate = nil
  --placeDeckHereText = getObjectFromGUID(placeDeckHereText_GUID)
end


function onObjectEnterScriptingZone(zone, object)
  -- card_info table:
  -- action        int
  -- power         int
  -- range         int
  -- types         table:
  --               [TYPENAME]        bool
  -- control       table
  --               [CONTROLNAME]     bool
  if zone == self and ultimate == nil then
      if (object.tag == "Card") and not reservedUlt then
        card_info = gameManager.call("getCardStats", {name = object.getName()})
        if card_info.types.ultimate then
          --print('Ultimate')
          reservedUlt = object
          if self.getButtons() == nil then
            local button_parameters = {}
            button_parameters.click_function = 'assignUlt'
            button_parameters.label = "Assign Ultimate"
            button_parameters.function_owner = self
            button_parameters.position = {0.00, -0.45, -0.60}
            button_parameters.rotation = {00.00, 180.00, 0.00}
            button_parameters.font_size = 60
            button_parameters.width = 500
            button_parameters.height = 50
            --button_parameters.font_color = {1,1,1}
            button_parameters.scale = {1.00, 1.00, 1.00}
            self.createButton(button_parameters)
            --deckBuilder.call("makeDeck", {object.guid, zone.guid})
          end

        end
      end
  end
end

function onObjectLeaveScriptingZone(zone, object)
  if zone == self then
      if (object == reservedUlt) then
          reservedUlt = nil
          self.clearButtons()
      end
  end
end

function assignUlt()
  ultimate = reservedUlt
  self.clearButtons()
  --placeDeckHereText.destruct()
  --reservedUlt.setRotation({reservedDeck.getRotation().x, reservedDeck.getRotation().y, 180})
  --deckBuilder.call("makeDeck", {reservedDeck.guid, self.guid})
end