--[[ Lua code. See documentation: http://berserk-games.com/knowledgebase/scripting/ --]]
-- -121.62 is max distance from table

getmetatable('').__call = string.sub
TYPE_MASK_ABILITY = 128
TYPE_MASK_ATTACK = 64
TYPE_MASK_AURA = 32
TYPE_MASK_BUFF = 16
TYPE_MASK_INSTANT = 8
TYPE_MASK_PASSIVE = 4
TYPE_MASK_TRAVEL = 2
TYPE_MASK_ULTIMATE = 1

CONTROL_MASK_SLOW = 4
CONTROL_MASK_SILENCE = 2
CONTROL_MASK_DISARM = 1

playerAttributes = {Red = {action = 0, power = 0, slow = 0, silence = 0, disarm = 0, hand_GUID = 'acb721', ultimate_GUID = '36fe43', trait1_GUID = '65d095', trait2_GUID = 'ed9e05'},
                    Blue = {action = 0, power = 0, slow = 0, silence = 0, disarm = 0, hand_GUID = 'f4df35', ultimate_GUID = '487a1a', trait1_GUID = '85b766', trait2_GUID = '019cd0'}}

redAction_GUID = '671922'
redPower_GUID = 'cfd8d5'
blueAction_GUID = 'd51b94'
bluePower_GUID = 'e32e8b'
cardData = {}
Stack = {}
-- Stack Table
-- Uses a table as stack, use <table>:push(value) and <table>:pop()
-- Lua 5.1 compatible
-- Create a Table with stack functions
function Stack:Create()
  -- stack table
  local t = {}
  -- entry table
  t._et = {}

  function t:push(...)
    if ... then
      local targs = {...}
      for _,v in ipairs(targs) do
        table.insert(self._et, v)
      end
    end
  end

  function t:pop(num)
    local num = num or 1
    local entries = {}
    for i = 1, num do
      if #self._et ~= 0 then
        table.insert(entries, self._et[#self._et])
        table.remove(self._et)
      else
        break
      end
    end
    return unpack(entries)
  end

  function t:top()
    local entries = {}
    if #self._et ~= 0 then
      table.insert(entries, self._et[#self._et])
    end

    return unpack(entries)
  end

  function t:list()
    for i,v in pairs(self._et) do
      print(i, v)
    end
  end


  function t:getEntries()
    return self._et
  end

  return t
end
-- CHILLCODEâ„¢
function onLoad(save_state)

  currentPlayer = "Blue"
  stack = Stack:Create()
  stackSize = 0.00
  redAction = getObjectFromGUID(redAction_GUID)
  redPower = getObjectFromGUID(redPower_GUID)
  blueAction = getObjectFromGUID(blueAction_GUID)
  bluePower = getObjectFromGUID(bluePower_GUID)
end

function onObjectPickedUp(player_color, picked_up_object)
  if (picked_up_object.tag == "Card") then
    if not(picked_up_object.getDescription() == '') then
      updateCardData({card = picked_up_object})
    end
  end
end

function onObjectLeaveContainer(container, object)
  if (object.tag == "Card") then
    if not(object.getDescription() == '') then
      updateCardData({card = object})
    end
  end
end

function setAttribute(attribute_info)
  -- attribute_info table:
  --  color     string
  --  attribute string
  --  value     int
  color = attribute_info.color
  attribute = attribute_info.attribute
  value = attribute_info.value

  if value == 6 then
     value = 0
  end

  previousValue = playerAttributes[color][attribute]
  playerAttributes[color][attribute] = value

  if not (value > 0 and previousValue > 0 and (attribute == 'slow' or attribute == 'silence' or attribute == 'disarm')) then
    getObjectFromGUID(playerAttributes[color]['hand_GUID']).call('updatePlayableCards', (playerAttributes[color]))
    getObjectFromGUID(playerAttributes[color]['ultimate_GUID']).call('updatePlayability', (playerAttributes[color]))
    getObjectFromGUID(playerAttributes[color]['trait1_GUID']).call('updatePlayability', (playerAttributes[color]))
    getObjectFromGUID(playerAttributes[color]['trait2_GUID']).call('updatePlayability', (playerAttributes[color]))
  end
end

-- player table:
-- color    string
function getAttributes(player)
  return playerAttributes[player.color]
end

-- Action, Power, Range:
-- 0..5   : 0..5,
-- -1..-5 : A..E,
-- N/A    : N
--
-- Types:
-- 0xYZ
-- Y: Ability, Attack, Aura, Buff
-- Z: Instant, Passive, Travel, Ultimate
--
-- Control:
-- octal: Slow, Silence, Disarm
function updateCardData(info)
  card = info.card
  description = card.getDescription()
  if (not cardData[card.getName()]) then

    local action = string.byte(description, 1)
    if 47 < action and action < 54 then
      action = action - 48
    elseif 64 < action and action < 70 then
      action = 64 - action
    elseif action == 78 then
      --action = 'N/A'
    end

    local power = string.byte(description, 2)
    if 47 < power and power < 54 then
      power = power - 48
    elseif 64 < power and power < 70 then
      power = 64 - power
    elseif power == 78 then
      --power = 'N/A'
    end

    local range = string.byte(description, 3)
    if 47 < range and range < 54 then
      range = range - 48
    elseif 64 < range and range < 70 then
      range = 64 - range
    elseif range == 78 then
      --range = 'N/A'
    end

    --TODO turn this into for loop.
    local types = {
      ability = false,
      attack = false,
      aura = false,
      buff = false,
      instant = false,
      passive = false,
      travel = false,
      ultimate = false
    }
    local typemask = tonumber(description(4,5), 16)
    if typemask >=TYPE_MASK_ABILITY then
      typemask = typemask - TYPE_MASK_ABILITY
      types.ability = true
    end
    if typemask >= TYPE_MASK_ATTACK then
      typemask = typemask - TYPE_MASK_ATTACK
      types.attack = true
    end
    if typemask >= TYPE_MASK_AURA then
      typemask = typemask - TYPE_MASK_AURA
      types.aura = true
    end
    if typemask >= TYPE_MASK_BUFF then
      typemask = typemask - TYPE_MASK_BUFF
      types.buff = true
    end
    if typemask >= TYPE_MASK_INSTANT then
      typemask = typemask - TYPE_MASK_INSTANT
      types.instant = true
    end
    if typemask >= TYPE_MASK_PASSIVE then
      typemask = typemask - TYPE_MASK_PASSIVE
      types.trait = true
    end
    if typemask >= TYPE_MASK_ULTIMATE then
      typemask = typemask - TYPE_MASK_ULTIMATE
      types.ultimate = true
    end

    local controlmask = tonumber(description(6,6), 16)

    local control = {slow = false, silence = false, disarm = false}

    if controlmask >= CONTROL_MASK_SLOW then
      controlmask = controlmask - CONTROL_MASK_SLOW
      control.slow = true
    end
    if controlmask >= CONTROL_MASK_SILENCE then
      controlmask = controlmask - CONTROL_MASK_SILENCE
      control.silence = true
    end
    if controlmask >= CONTROL_MASK_DISARM then
      controlmask = controlmask - CONTROL_MASK_DISARM
      control.disarm = true
    end

    cardData[card.getName()] = {action = action,
                                power = power,
                                range = range,
                                types = types,
                                control = control}
  end
end


function getCardStats(info_table)
--info_table table:
--name    string
  if cardData[info_table.name] then
    return cardData[info_table.name]
  end

end

function checkIfPlayable(play_info)
  -- play_info table:
  -- name         string  --the name of the card
  -- attributes   table:
  --              [ATTRIBUTENAME]  int
  --  color       string
  --playability table:
  --playable      bool
  --attributes    table:
  --              [ATTRIBUTENAME]  bool
  -- card_stats table:
  -- action        int
  -- power         int
  -- range         int
  -- types         table:
  --               [TYPENAME]        bool
  -- control       table
  --               [CONTROLNAME]     bool
  playability = {playable = false, restricted = {action = false, power = false, slow = false, silence = false, disarm = false, instant = false, feat = false}}
  name = play_info.name
  card_stats = getCardStats({name = name})
  attributes = play_info.attributes
  color = play_info.color
  if (attributes.action + card_stats.action < 0 ) then
    playability.restricted['action'] = true
  end
  if (attributes.power + card_stats.power < 0 ) then
    playability.restricted['power'] = true
  end

  for control_type, affected in pairs(card_stats.control) do
      if (attributes[control_type] > 0 and affected) then
        playability.restricted[control_type] = true
      end
  end
  if (not card_stats.types.instant) and not (currentPlayer == color) then
    playability.restricted['instant'] = true
  end


  local feat = nil
  if(card_stats.types.ultimate) then
    feat = getObjectFromGUID(attributes.ultimate_GUID)
  elseif(card_stats.types.trait) then
    if(name == getObjectFromGUID(attributes.trait1_GUID).call("getTraitName")) then
      feat = getObjectFromGUID(attributes.trait1_GUID)
    elseif(name == getObjectFromGUID(attributes.trait2_GUID).call("getTraitName")) then
      feat = getObjectFromGUID(attributes.trait2_GUID)
    end
  end
  if feat and feat.call('getPlayed') then
    playability.restricted['feat'] = true
  end
  playability.playable = not (playability.restricted.action or
                            playability.restricted.power or
                            playability.restricted.slow or
                            playability.restricted.silence or
                            playability.restricted.disarm or
                            playability.restricted.instant or
                            playability.restricted.feat)
  --print(playability.playable)
  return playability
end

function playCard (info_table)
  -- info_table table:
  -- player_color   string
  -- card           object
  card = info_table.card
  player_color = info_table.player_color
  name = card.getName()
  attributes = getAttributes({color = player_color})
  if player_color == 'Red' then
    actionDie = redAction
    powerDie = redPower
  else
    actionDie = blueAction
    powerDie = bluePower
  end

  playability = checkIfPlayable({name = name, attributes = attributes, color = player_color})
  card_stats = getCardStats({name = name})

  actionDif = attributes.action + card_stats.action
  powerDif = attributes.power + card_stats.power

  if playability.playable then
    print(player_color .. ' played ' .. name)


    local feat = nil
    if(card_stats.types.ultimate) then
      feat = getObjectFromGUID(attributes.ultimate_GUID)
      feat.call('playedThisTurn')
    elseif(card_stats.types.trait) then
      if(name == getObjectFromGUID(attributes.trait1_GUID).call("getTraitName")) then
        feat = getObjectFromGUID(attributes.trait1_GUID)
      elseif(name == getObjectFromGUID(attributes.trait2_GUID).call("getTraitName")) then
        feat = getObjectFromGUID(attributes.trait2_GUID)
      end
      feat.call('playedThisTurn')
    end
    if (card_stats.action < 0) then
      if (actionDif > 0) then
        actionDie.setValue(actionDie.getValue() + card_stats.action)
      elseif (actionDif == 0) then
        actionDie.setValue(6)
      end
    end
    if (card_stats.power < 0) then
      if (powerDif > 0) then
        powerDie.setValue(powerDie.getValue() + card_stats.power)
      elseif (powerDif == 0) then
        powerDie.setValue(6)
      end
    end

    for i,v in pairs(stack:getEntries()) do
      v.card.setPositionSmooth({v.card.getPosition().x - 1.25, 5.00, 0.00}, false, false)
      --v.card.flip()
    end

    card.setPositionSmooth({(stackSize * 1.25), 5.00, 0.00}, false, false)
    if stack:top() then
      stack:top().card.highlightOff()
    end
    stack:push({card = card, player_color = player_color})
    stack:top().card.highlightOn({1,1,0})
    stack:top().card.setLock(true)
    stackSize = stackSize + 1.00
    --card.setPositionSmooth({, 5.00, 0.00}, false, false)
  else
    --if getSeatedPlayers()[player_color] then
      if playability.restricted.action  then
        printToColor(name.." can't be played: not enough"..'[ed7905] actions [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.power  then
          printToColor(name.." can't be played: not enough"..'[35bdcd] power [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.slow  then
          printToColor(name.." can't be played: affected by"..'[49ac2d] slow [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.silence  then
          printToColor(name.." can't be played: affected by"..'[248eab] silence [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.disarm  then
          printToColor(name.." can't be played: affected by"..'[db2325] disarm [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.instant  then
          printToColor(name.." can't be played: not an instant", player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.feat  then
          printToColor(name.." can't be played: already played this turn", player_color, {r=1,g=1,b=1})
      end
    --end
  end
end

function resolveCard()
  local feat = nil
  stack_entry = stack:pop()
  if (stack_entry ~= nil) then
    card = stack_entry.card
    player_color = stack_entry.player_color
    attributes = getAttributes({color = player_color})
    name = card.getName()
    print(player_color .. ' resolved ' .. name)
    playability = checkIfPlayable({name = name, attributes = attributes, player_color})
    card_stats = getCardStats({name = name})
    if player_color == 'Red' then
      actionDie = redAction
      powerDie = redPower
      destinationZone = {9, 1.5, -12.2}
    else
      actionDie = blueAction
      powerDie = bluePower
      destinationZone = {-9, 1.5, 12.2}
    end
    if(card_stats.types.ultimate) then
      feat = getObjectFromGUID(attributes.ultimate_GUID)
      destinationZone = (feat.call("getDestination"))
    elseif (card_stats.types.trait) then
      if(name == getObjectFromGUID(attributes.trait1_GUID).call("getTraitName")) then
        feat = getObjectFromGUID(attributes.trait1_GUID)
      elseif(name == getObjectFromGUID(attributes.trait2_GUID).call("getTraitName")) then
        feat = getObjectFromGUID(attributes.trait2_GUID)
      end
      destinationZone = (feat.call("getDestination"))
    end

    if (playability.restricted.slow or playability.restricted.silence or playability.restricted.disarm) then
      if playability.restricted.slow  then
          printToColor(name.." metacountered: affected by"..'[49ac2d] slow [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.silence  then
          printToColor(name.." metacountered: affected by"..'[248eab] silence [-]', player_color, {r=1,g=1,b=1})
      end
      if playability.restricted.disarm  then
          printToColor(name.." metacountered: affected by"..'[db2325] disarm [-]', player_color, {r=1,g=1,b=1})
      end
      actionDif = attributes.action - card_stats.action
      powerDif = attributes.power - card_stats.power
      if (card_stats.action < 0) then
        if (actionDif <= 5) then
          actionDie.setValue(actionDif)
        else
          actionDie.setValue(5)
        end
      end
      if (card_stats.power < 0) then
        if (powerDif <= 5) then
          powerDie.setValue(powerDif)
        else
          powerDie.setValue(5)
        end
      end
    else
      actionDif = attributes.action + card_stats.action
      powerDif = attributes.power + card_stats.power
      if (card_stats.action > 0) then
        if (actionDif <= 5) then
          actionDie.setValue(actionDif)
        else
          actionDie.setValue(5)
        end
      end
      if (card_stats.power > 0) then
        if (powerDif <= 5) then
          powerDie.setValue(powerDif)
        else
          powerDie.setValue(5)
        end
      end
    end
    card.highlightOff()
    card.setLock(false)
    card.setPositionSmooth(destinationZone, false, false)
    if(card_stats.types.ultimate or card_stats.types.trait) then
      feat.call('offStack')
      feat.call('updatePlayability', attributes)
    end
    for i,v in pairs(stack:getEntries()) do
      v.card.setPositionSmooth({v.card.getPosition().x + 1.25, 5.00, 0.00}, false, false)
    end
    if(stack:top()) then
      stack:top().card.highlightOn({1,1,0})
    end
    stackSize = stackSize - 1.00
  end
end

--info_table:
--object    object
--zone      zone
function inZone(info_table)
  object = info_table.object
  zone = info_table.zone
  for i,v in ipairs(zone.getObjects()) do
    if (v == object) then
      return true
    end
  end
  return false
end


function onPlayerTurnStart(player_color_start, player_color_previous)
  currentPlayer = player_color_start
  getObjectFromGUID(playerAttributes[player_color_start]['hand_GUID']).call('updatePlayableCards', (playerAttributes[player_color_start]))
  getObjectFromGUID(playerAttributes[player_color_previous]['hand_GUID']).call('updatePlayableCards', (playerAttributes[player_color_previous]))
end
--]]